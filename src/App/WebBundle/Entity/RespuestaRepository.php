<?php

namespace App\WebBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * RespuestaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RespuestaRepository extends EntityRepository
{
	public function findAllById($idCriterio,$idEvaluador,$idinscripcion,$isParent,$idTipoEtapa,$isArray){
		$em=$this->getEntityManager();
		if($isParent){
			$ids=$this->getAllRespuestasSubcriterios($idCriterio);
			if($ids==null)
				$ids='0';
	        $dql   = "SELECT r,c,e,i,te FROM AppWebBundle:Respuesta r
	        		JOIN r.criterio c
	        		JOIN r.evaluador e
	        		JOIN r.inscripcion i
	        		JOIN r.tipoEtapa te
	        		where c.id in($ids)
	        		AND (e.id=:idevaluador or :idevaluador=0)
	        		AND i.id=:idinscripcion
	        		AND te.id=:idtipoetapa";
	        $query = $em->createQuery($dql)
	        	->setParameter('idevaluador', $idEvaluador)
	        	->setParameter('idinscripcion', $idinscripcion)
	        	->setParameter('idtipoetapa', $idTipoEtapa);
	    }else{

	    	$dql   = "SELECT r,c,e,i,te FROM AppWebBundle:Respuesta r
	        		JOIN r.criterio c
	        		JOIN r.evaluador e
	        		JOIN r.inscripcion i
	        		JOIN r.tipoEtapa te
	        		where c.id=:id
	        		AND (e.id=:idevaluador or :idevaluador=0)
	        		AND i.id=:idinscripcion
	        		AND te.id=:idtipoetapa";
	        $query = $em->createQuery($dql)
	        	->setParameter('id', $idCriterio)
	        	->setParameter('idevaluador', $idEvaluador)
	        	->setParameter('idinscripcion', $idinscripcion)
	        	->setParameter('idtipoetapa', $idTipoEtapa);
	    }
        
        try {
                if($isArray)
                	return $query->getArrayResult();
                else
                	return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
                return null;
        }
	}

	public function findAllByEtapa($idinscripcion,$idtipoetapa,$estado,$isArray){
		$em=$this->getEntityManager();
        $dql   = "SELECT r FROM AppWebBundle:Respuesta r
	        		JOIN r.inscripcion i
	        		JOIN r.tipoEtapa te
	        		WHERE i.id=:idinscripcion
	        		AND te.id=:idtipoetapa
	        		AND r.estado=:estado";
        $query = $em->createQuery($dql)
        	->setParameter('idinscripcion', $idinscripcion)
        	->setParameter('idtipoetapa', $idtipoetapa)
        	->setParameter('estado', $estado);
	    
        
        try {
                if($isArray)
                	return $query->getArrayResult();
                else
                	return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
                return null;
        }
	}
	public function getAllRespuestasSubcriterios($idsubcriterio){
		 $conn = $this->getEntityManager()->getConnection('database_connection');//create a connection with your DB
        $sql="select GROUP_CONCAT(pregunta.id) as ids from concursocriterio subcriterio inner 
        	JOIN concursocriterio areaanalisis ON areaanalisis.idpadre=subcriterio.id
        	JOIN concursocriterio pregunta ON pregunta.idpadre=areaanalisis.id
        	WHERE subcriterio.id=$idsubcriterio
        	GROUP BY subcriterio.id";                  
    
        $stmt = $conn->prepare($sql);  
        $stmt->execute(); 
        $result=$stmt->fetchAll();

        if($result)
          	return $result[0]['ids'];
        else
          	return null;

         
	}

	public function findArray($id){
        $em=$this->getEntityManager();
        $dql= "SELECT r,cr FROM AppWebBundle:Respuesta r 
        		join r.criterio cr
             WHERE r.id=:id";
        $query=$em->createQuery($dql)->setParameter('id', $id);
        try {
                return $query->getArrayResult();

        } catch (\Doctrine\ORM\NoResultException $e) {
                return null;
        }
    }
}
