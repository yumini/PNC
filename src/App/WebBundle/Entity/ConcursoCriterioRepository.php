<?php

namespace App\WebBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ConcursoCriterioRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConcursoCriterioRepository extends EntityRepository
{
	public function findArray($id){
        $em=$this->getEntityManager();
        $dql= "SELECT c FROM AppWebBundle:ConcursoCriterio c 
             WHERE c.id=:id";
        $query=$em->createQuery($dql)->setParameter('id', $id);
        try {
                return $query->getArrayResult();

        } catch (\Doctrine\ORM\NoResultException $e) {
                return null;
        }
    }
    public function FindByConcurso($idConcurso,$isArray=false){
        $em=$this->getEntityManager();
        $dql= "SELECT cp FROM AppWebBundle:ConcursoCriterio cp 
                JOIN cp.concurso c WHERE c.id=:id";
        $query=$em->createQuery($dql)->setParameter('id', $idConcurso);
        try {
                if($isArray)
                    return $query->getArrayResult();
                else
                    return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
                return null;
        }
    }
    public function FindByParentId($idConcurso,$idpadre,$isArray=false){
        $em=$this->getEntityManager();
        $dql= "SELECT cp FROM AppWebBundle:ConcursoCriterio cp 
                JOIN cp.concurso c 
                WHERE c.id=:idconcurso
                AND cp.idpadre=:idpadre";
        $query=$em->createQuery($dql)
                ->setParameter('idconcurso', $idConcurso)
                ->setParameter('idpadre', $idpadre);
        try {
                if($isArray)
                    return $query->getArrayResult(); 
                else   
                    return $query->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
                return null;
        }
    }
    public function GetIds($id){
        $conn = $this->getEntityManager()->getConnection('database_connection');//create a connection with your DB
        $sql="
        SELECT GROUP_CONCAT(T.id) as ids FROM
        (
            SELECT c.* from concursocriterio c
            WHERE c.id=$id
            UNION
            SELECT s.* from concursocriterio c join concursocriterio s ON s.idpadre=c.id
            WHERE c.id=$id
            UNION
            SELECT a.* from concursocriterio c 
            join concursocriterio s ON s.idpadre=c.id
            join concursocriterio a ON a.idpadre=s.id
            WHERE c.id=$id
            UNION
            SELECT p.* from concursocriterio c 
            join concursocriterio s ON s.idpadre=c.id
            join concursocriterio a ON a.idpadre=s.id
            join concursocriterio p ON p.idpadre=a.id
            WHERE c.id=$id
        ) T";  
        $stmt = $conn->prepare($sql);  
        $stmt->execute(); 
        $result=$stmt->fetch(); 
        return  $result['ids']; 
    }
    public function Remove($id){
        $conn = $this->getEntityManager()->getConnection('database_connection');//create a connection with your DB
        $ids=$this->GetIds($id);
        $sql="delete from  concursocriterio where id in ($ids)";                   
        $stmt = $conn->prepare($sql);  
        $stmt->execute(); 
         
    }

}
